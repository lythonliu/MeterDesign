今日课题：NestedScrolling机制源码详解和MaterialDesign动画


遗留问题
bug
ViewGroup



dispatchTouchEvent 、onInterceptTouchEvent和onTouchEvent。

move  recleyView 移动


当子控件 快速滑动  
 dispatchTouchEvent
 
 
 NestedSrollview  
 
消费了滑动事件  

onTouchEvent--》startNestedScroll   开始滑动
  NestedScrollingChildHelper  事件分发辅助类
  
  ViewParentCompat.onStartNestedScroll
  
  
  
move事件如何运转的

onNestedScroll

onTouchEvent----》scrollByInternal--》dispatchNestedScroll---》ViewParentCompat.onNestedScroll


--》onNestedScroll

CoordinatorLayout   onMeasure  onSizeChange

事件分发 
CoordinatorLayout作为“super-powered FrameLayout”基本实现两个功能： 

1、作为顶层布局 
2、调度协调子控件


--------------------------------------MaterialDesign--------------------------------------
在Android L中新增了如下几种动画：
  ● Touch feedback（触摸反馈）
  
  
  
  
  <item android:id="@android:id/mask" android:drawable="@mipmap/ic_launcher"/>
  
  id 首先不会出现
  
  
  ● Reveal effect（揭露效果）
  
  
  
  
  
  
  
  
  
  
  
  ● Activity transitions（Activity转换效果）
      但是这种老旧、生硬的方式怎么能适合我们的MD风格的App呢!
	  好在google在新的sdk中给我们提供了另外一种Activity的过度动画――ActivityOptions。
	  并且提供了兼容包――ActivityOptionsCompat。这篇博客我们就是来了解下这个新的activity过度机制。
	  
	  3.Activity transition（Activity转场动画效果）
      概念：两个Activity进行跳转的时候，转场动画。
	  
	  方式1
	  getWindow().requestFeature(Window.FEATURE_CONTENT_TRANSITIONS);

	  
  ● Curved motion（曲线运动）
  ● View state changes （视图状态改变）
  ● Animate Vector Drawables（可绘矢量动画）
  
  
  
 
 makeScaleUpAnimation这种方式个人感觉用途还是很广的，效果就是不断的 
放大一个view，进而进行activity的过度， 
    ActivityOptionsCompat compat = ActivityOptionsCompat.makeScaleUpAnimation(view,
            view.getWidth() / 2, view.getHeight() / 2, 0, 0);
    ActivityCompat.startActivity(this, new Intent(this, Activity2.class),
            compat.toBundle());

第1个参数是scale哪个view的大小，第2和3个参数是以view为基点，从哪开始动画，这里是该view的中心，4和5参数是新的activity从多大开始放大，这里是从无到有的过程。




	1）共享元素转换
		概念：可以把两个Activity当中的相同的元素关联起来做连贯的变换动画。
		前提：（1）给两个Activity当中的共享元素view都设置同一个名字---android:transitionName
				<ImageView
				android:id="@+id/iv1"
				android:layout_width="match_parent"
				android:layout_height="match_parent"
				android:scaleType="centerCrop"
				android:transitionName="iv_meinv3"
				android:src="@drawable/meinv3" />

			
		
		按返回键的时候自动实现了返回的共享元素转场动画，原因看源码：
		public void onBackPressed() {
			finishAfterTransition();
		}
		public void finishAfterTransition() {
			if (!mActivityTransitionState.startExitBackTransition(this)) {
			    finish();
			}
		}

		//单个元素共享
		ActivityOptionsCompat optionsCompat = ActivityOptionsCompat.makeSceneTransitionAnimation(this, iv1, "iv_meinv3");
		Intent intent = new Intent(this, SecondActivity.class);
		startActivity(intent, optionsCompat.toBundle());
		//多个共享元素
		ActivityOptionsCompat optionsCompat = ActivityOptionsCompat
				.makeSceneTransitionAnimation(this, Pair.create((View)iv1, "iv1"),Pair.create((View)bt, "bt"));
		Intent intent = new Intent(this, SecondActivity.class);
		startActivity(intent, optionsCompat.toBundle());


	2）普通的转换动画
		（只有API 21才有下面自带效果）
		三种系统带的：滑动效果(Slide)、展开效果Explode、渐变显示隐藏效果Fade








